
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.7.1
 * Query Engine version: 0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5
 */
Prisma.prismaVersion = {
  client: "5.7.1",
  engine: "0ca5ccbcfa6bdc81c003cf549abe4269f59c41e5"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  refresh_token_expires_in: 'refresh_token_expires_in',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.WhitelistScalarFieldEnum = {
  id: 'id',
  githubName: 'githubName',
  quantity: 'quantity',
  createdAt: 'createdAt',
  teamAccountId: 'teamAccountId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  role: 'role',
  email: 'email',
  emailVerified: 'emailVerified',
  contactEmail: 'contactEmail',
  image: 'image',
  firstName: 'firstName',
  lastName: 'lastName',
  lastSeen: 'lastSeen',
  ownedTeamAccountIds: 'ownedTeamAccountIds',
  teamAccountIds: 'teamAccountIds'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.OneTimeCodesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  expires: 'expires',
  type: 'type',
  email: 'email',
  createdAt: 'createdAt',
  teamAccountId: 'teamAccountId'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  featureList: 'featureList'
};

exports.Prisma.TeamAccountScalarFieldEnum = {
  id: 'id',
  name: 'name',
  aliasEmail: 'aliasEmail',
  verifiedEmailAddresses: 'verifiedEmailAddresses',
  teamAccountUserIds: 'teamAccountUserIds',
  ownerIds: 'ownerIds',
  campaignIds: 'campaignIds',
  subscriptionId: 'subscriptionId'
};

exports.Prisma.ContactScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  email: 'email',
  contactEmails: 'contactEmails',
  teamAccountId: 'teamAccountId',
  emailIds: 'emailIds',
  emailThreadIds: 'emailThreadIds',
  targetIds: 'targetIds'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  to: 'to',
  bcc: 'bcc',
  cc: 'cc',
  from: 'from',
  subject: 'subject',
  text: 'text',
  sentByUser: 'sentByUser',
  sentAt: 'sentAt',
  contactIds: 'contactIds',
  teamAccountId: 'teamAccountId',
  messageId: 'messageId',
  emailThreadId: 'emailThreadId'
};

exports.Prisma.EmailThreadScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactIds: 'contactIds',
  teamAccountId: 'teamAccountId',
  targetIds: 'targetIds'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamAccountId: 'teamAccountId',
  subject: 'subject',
  text: 'text',
  teamAccountUserId: 'teamAccountUserId',
  githubTargetId: 'githubTargetId'
};

exports.Prisma.TargetScoutScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  dependencyName: 'dependencyName',
  dependencyFilename: 'dependencyFilename'
};

exports.Prisma.CustomFieldScalarFieldEnum = {
  id: 'id',
  key: 'key',
  bgColor: 'bgColor',
  type: 'type',
  targetType: 'targetType',
  campaignId: 'campaignId'
};

exports.Prisma.CustomFieldValueScalarFieldEnum = {
  id: 'id',
  value_string: 'value_string',
  value_number: 'value_number',
  value_date: 'value_date',
  value_boolean: 'value_boolean',
  customFieldId: 'customFieldId',
  targetContactId: 'targetContactId'
};

exports.Prisma.TargetContactScalarFieldEnum = {
  id: 'id',
  githubTargetId: 'githubTargetId',
  industry: 'industry',
  projectOwner: 'projectOwner',
  projectName: 'projectName',
  type: 'type',
  location: 'location',
  teamAccountId: 'teamAccountId',
  status: 'status',
  campaignIds: 'campaignIds'
};

exports.Prisma.GithubTargetScalarFieldEnum = {
  id: 'id',
  githubGraphqlId: 'githubGraphqlId',
  campaignIds: 'campaignIds',
  reportIds: 'reportIds',
  type: 'type',
  metadata: 'metadata',
  displayName: 'displayName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contactIds: 'contactIds',
  emailThreadIds: 'emailThreadIds'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  targetIds: 'targetIds',
  createdAt: 'createdAt',
  dependenciesInfo: 'dependenciesInfo',
  teamAccountIds: 'teamAccountIds',
  targetScoutIds: 'targetScoutIds',
  budget: 'budget',
  lightMode: 'lightMode',
  startDate: 'startDate',
  endDate: 'endDate',
  targetContactIds: 'targetContactIds',
  archived: 'archived',
  archivedAt: 'archivedAt'
};

exports.Prisma.TrackerScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  trackerName: 'trackerName',
  dependencies: 'dependencies',
  defaultFileNames: 'defaultFileNames',
  customFileNames: 'customFileNames'
};

exports.Prisma.EvaluationScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  accountId: 'accountId',
  teamAccountId: 'teamAccountId',
  githubTargetId: 'githubTargetId',
  type: 'type',
  params: 'params',
  query: 'query',
  queryVariables: 'queryVariables',
  paginators: 'paginators',
  maxPerPage: 'maxPerPage',
  dataId: 'dataId',
  result: 'result',
  status: 'status',
  error: 'error',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trackerId: 'trackerId',
  userId: 'userId'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  targetIds: 'targetIds',
  type: 'type',
  params: 'params',
  title: 'title',
  body: 'body',
  createdAt: 'createdAt'
};

exports.Prisma.GithubRepositoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  owner: 'owner',
  url: 'url'
};

exports.Prisma.ZapierEventScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  createdAt: 'createdAt',
  text: 'text'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  Account: 'Account',
  Whitelist: 'Whitelist',
  Session: 'Session',
  User: 'User',
  VerificationToken: 'VerificationToken',
  OneTimeCodes: 'OneTimeCodes',
  Subscription: 'Subscription',
  TeamAccount: 'TeamAccount',
  Contact: 'Contact',
  Email: 'Email',
  EmailThread: 'EmailThread',
  Note: 'Note',
  TargetScout: 'TargetScout',
  CustomField: 'CustomField',
  CustomFieldValue: 'CustomFieldValue',
  TargetContact: 'TargetContact',
  GithubTarget: 'GithubTarget',
  Campaign: 'Campaign',
  Tracker: 'Tracker',
  Evaluation: 'Evaluation',
  Report: 'Report',
  GithubRepository: 'GithubRepository',
  ZapierEvent: 'ZapierEvent'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
